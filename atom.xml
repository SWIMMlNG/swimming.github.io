<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>swimmingの奇妙冒险</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-12T12:13:56.995Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>swimming</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>b站江科大51单片机学习笔记</title>
    <link href="http://example.com/2023/10/12/51%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/10/12/51%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-12T12:01:09.000Z</published>
    <updated>2023-10-12T12:13:56.995Z</updated>
    
    <content type="html"><![CDATA[<p>​因为之前已经跟着江科大学完了51单片机，所以还是把记的一些笔记整合一下好点，C语言部分就不在这里写了</p><h3 id="led模块"><a href="#led模块" class="headerlink" title="led模块"></a>led模块</h3><p>控制灯的量灭的是P2<br>而P2是由两个十六进制数来表示的<br>初始为1111 1111表示所有灯都是灭的<br>也可以单独进行赋值来控制灯的亮灭<br>比如设置P2_1&#x3D;&#x3D;0表示D1为亮</p><p>delay的延迟函数可以在stc-isp中自动生产，记得要把频率改成12<br>把8051指令集改成stc Y1；</p><h3 id="独立按钮模块"><a href="#独立按钮模块" class="headerlink" title="独立按钮模块"></a>独立按钮模块</h3><p>四个按钮从左到右分别是P3_1, P3_0, P3_2 和P3_3<br>然后0为按下1为没按，可以通过判断来实现按钮的信号到槽的效果</p><h3 id="静态数码管显示"><a href="#静态数码管显示" class="headerlink" title="静态数码管显示"></a>静态数码管显示</h3><p>也是由P2来控制哪个灯量哪个灯不亮<br>不过只包括其中三个<br>P2_4,P2_3,P2_2;<br>通过二进制来表示八个位置上哪个位置亮灯</p><p>然后控制灯量的形状的则是P0<br>其实一个数字灯是由八个小灯拼出来的<br>最后一个为0，剩下的分别代表abcdefg七个位置的，确定哪个地方不亮就设置为0<br>最后加上最后的0，然后反过来转换为十六进制赋值给P0；</p><p>数码管正常来说只能显示一个地方<br>要同时显示多个位置得快速进行更改，<br>只要闪的够快就相当于多个位置同时显示<br>记得要在显示不同位置的间隔加一点点延时，用来消隐；</p><p>数码管之后是模块化编程<br>其实就是将要使用的函数写到别的.h .c文件里</p><h3 id="LCD显示屏"><a href="#LCD显示屏" class="headerlink" title="LCD显示屏"></a>LCD显示屏</h3><p>我们用的是LCD1602，大概这个是某个版本的吧<br>这个显示屏是买的时候带的，用法就是插在板子的右上角<br>用这个的时候数码管是用不了的，因为引脚冲突什么的好像<br>然后这个东西的原理还没讲，不过要用的话给了相应的工程文件，也就是LCD1602.h  LCD1602.c;<br>拷贝到同一路径下直接调用就行了，里面注释写的也很清楚。</p><h3 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h3><p>这个东西有点复杂啊，其实也没那么复杂<br>每个键位都链接两个接口，这样十六个键位只要4*4个接口就行<br>也就是P1_0到P1_7<br>初始的时候每个都是1<br>判断按钮是否按下就需要用到一种叫扫描的方法<br>这个扫描简单来说就是先固定一个前四个位置上某一个为0，然后判断后四个是否有0的<br>如果这两个都是0，就能确定哪个位置上的键被按下了。</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>老实说我完全没听懂关于定时器的原理的部分，所以我现在记的是写代码部分<br>在sic那个什么软件的定时器计算器的位置生成代码<br>记得要吧系统频率改成12，定时长度改成1毫秒<br>然后模式是16位（就是16位而不是16位自动重载），定时器时钟是12T，选定时器0<br>把生成的代码拷贝一下<br>在TMOD &amp;&#x3D; 0xF0；这行下面加上这行TMOD |&#x3D; 0x01;<br>然后在里面的加上下面三行<br>ET0&#x3D;1;<br>EA&#x3D;1;<br>PT0&#x3D;0;<br>别忘了把中断函数拷贝到主函数下面</p><h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><p>首先需要根据手册简单的配置一下<br>还要配置定时器什么的<br>其实麻烦点看手册也能配<br>但是stc-isp有自动计算波特率就很好用<br>选择系统频率，串口1<br>八位数据<br>定时器1的八位自动重载<br>12T的定时器时钟<br>然后就能自动生成了<br>发送数据的话只要把数据写道SBUF里就会自动发送，原理我也不知道，可能知道一点<br>但是不太想回忆起这个东西<br>发送完了之后通过标志位TI来判断是否发送成功<br>发送成功TI就会变成1<br>通过这个来判断就行了<br>但是这个东西他不会自己变回0，就需要在软件里手动在判断完之后设置为0，这样的话这个判断步骤就变成<br>了必要的，因为反正要把标志位设置为0，不如顺手判断一下。</p><h3 id="led点阵屏的显示"><a href="#led点阵屏的显示" class="headerlink" title="led点阵屏的显示"></a>led点阵屏的显示</h3><p>这个东西的显示比较复杂<br>每一列为一组来进行显示<br>每次显示的时候要对八个位置上的数分别进行传输什么什么的这个不太好解释清楚</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _74HC595_WriteByte(<span class="type">unsigned</span> <span class="type">char</span> Byte)&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">SER=Byte&amp;(<span class="number">0x80</span>&gt;&gt;i);</span><br><span class="line">SCK=<span class="number">1</span>;</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">RCK=<span class="number">1</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实和入栈差不多，全入完了就一起输出进行显示<br>P0表示显示哪一列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">matrixled_showColumn</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> column,Data)</span>&#123;</span><br><span class="line">_74HC595_WriteByte(Data);</span><br><span class="line">P0=~(<span class="number">0x80</span>&gt;&gt;column);</span><br><span class="line">delay(<span class="number">1</span>);</span><br><span class="line">P0=<span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I2C总线"><a href="#I2C总线" class="headerlink" title="I2C总线"></a>I2C总线</h3><p>这个总线只需要SDA和SCL两个引脚，<br>SDA是串行数据线，SCL是串行时钟线<br>总线空闲状态：SDA为高电平，SCL为低电平<br>I2C起始位：当SCL为高电平时，SDA出现下降沿，产生一个起始位<br>I2C结束位：当SCL为高电平时，SDA出现上升沿，产生一个结束位<br>I2C发送一个字节：从高位到低位依次给SDA，每给一次将SCL拉高再拉低一次<br>I2C接收一个字节：先将SDA拉高，也是依次将要接受的字节高位到地位给出来，但给出前判断SDA是否在高位，先将SCL拉高，<br>给了之后再拉低<br>I2C发送应答：将应答交给SDA然后拉高SCL拉低SCL；<br>I2C接收应答：先将SDA拉高，将SCL拉高，然后将SDA给要发出的应答，将SCL拉低</p><h3 id="AT24C02"><a href="#AT24C02" class="headerlink" title="AT24C02"></a>AT24C02</h3><p>首先AT24C02的地址在0XA0<br>写入数据：<br>先启动I2C，<br>给I2C发送AT24C02的地址，I2C接收到地址就发送应答，<br>然后给I2C要存入到AT24C02的那个位置的地址，然后I2C接收到就发送应答，<br>然后给I2C发送要存入的数据，然后I2C接收到就发送应答，<br>I2C停止，<br>读出数据：<br>先启动I2C<br>给I2C发送AT24C02的地址，I2C接收到地址就发送应答，<br>然后给I2C要存入到AT24C02的那个位置的地址，然后I2C接收到就发送应答<br>再启动一次I2C<br>将AT24C02的地址或上0X01发给I2C，I2C接收到返回应答<br>I2C接收一个数据送给要返回的变量，然后变量接收到后给I2C发送一个应答</p><h3 id="DS18B20温度传感器"><a href="#DS18B20温度传感器" class="headerlink" title="DS18B20温度传感器"></a>DS18B20温度传感器</h3><p>这个温度传感器用的是单总线时序结构<br>首先这个单总线叫DQ然后在我这个板是连在P3_7上的<br>初始化：<br>要先把总线拉低首先就得拉高总线，不然不能确定是否可以拉低，<br>拉低后延迟500us，这个延迟可以去stcisp那里copy过来，不能直接用delay那个函数<br>延迟后释放总线也就是把总线拉高<br>然后再延迟70us<br>用变量将电平读取出来，此时这个变量就是应答位<br>再延迟500us<br>最后返回应答位<br>发送一位：<br>要发送0的话就将总线拉低60到120us然后释放<br>要发送1的话就将总线拉低1到15us然后释放<br>从机在拉低30us后读取电平，判断是0还是1，所以整个时间要大于60us<br>现在有两个方法来实现这个操作<br>第一是判断我们要发送的0还是1，然后再进行发送<br>第二是先拉低电平然后延迟14us，然后将要发送的位赋值给总线，如果是1就会拉高，如果是0的话就还是低电平<br>再延迟50us来保证整个时间大于60us，如果是1的话后面的50us就会变成高电平，如果是0的话就会继续延迟50us<br>的低电平，这样就不需要进行判断，在50us延迟完了后释放总线。<br>接收一位：<br>先将总线拉低1到15us然后释放，在拉低后15us内用变量读取总线电平，返回读取到的电平如果低电平就是0，<br>高电平就是1，然后再加延迟加到整个时间大于60us。<br>我们先拉低总线8us左右，然后释放<br>再延迟8us后用变量读取电平<br>再延迟50us后返回电平。<br>发送一个字节：<br>一个字节等于八位，循环调用八次发送一位的函数把字节从前往后一位一位发送即可<br>大概这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">oneWire_sendBit(Byte&amp;(<span class="number">0x01</span>&lt;&lt;i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收一个字节<br>同样调用八次接收一位的函数，如果第i次返回的位是1的话就把要返回的字节相应位置变成1<br>大概这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(i=0;i&lt;8;i++)&#123;</span><br><span class="line">if(oneWire_receiveBit())&#123;</span><br><span class="line">Byte|=(0x01&lt;&lt;1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是DS18B20D的数据帧<br>温度变换：<br>初始化–&gt;跳过ROM–&gt;开始温度变换<br>先调用总线初始化函数，然后发送0xCC跳过ROM，再发送0x44开始温度变换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DS18B20_SKIP_ROM 0xCC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DS18B20_CONVERT_T 0x44</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ds18b20_ConvertT</span><span class="params">()</span>&#123;</span><br><span class="line">oneWire_Init();</span><br><span class="line">oneWire_SendByte(DS18B20_SKIP_ROM);</span><br><span class="line">oneWire_SendByte(DS18B20_CONVERT_T); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>温度读取：<br>初始化–&gt;跳过ROM–&gt;读暂存器–&gt;连续的读操作<br>首先初始化，然后发送0xCC跳过暂存器，然后发送0xBE读暂存器<br>因为一次只能读一个Byte，TLSB读取温度的前八位，TMSB读取后八位，一共16位<br>将TMSB左移然后拼接上TLSB后传给Temp；<br>因为这个温度有小数，所以前12位是整数，后4位是小数，所以要把Temp这个16位二进制整数右移4位也就是除以16<br>变成12位整数4位小数的浮点数给变量T，最后这个T就是我们要的温度，返回T</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DS18B20_READ_SCRATCHPAD 0xBE</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">ds18b20_ReadT</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> TLSB,TMSB;</span><br><span class="line"><span class="type">int</span> Temp;</span><br><span class="line"><span class="type">float</span> T;</span><br><span class="line">oneWire_Init();</span><br><span class="line">oneWire_SendByte(DS18B20_SKIP_ROM);</span><br><span class="line">oneWire_SendByte(DS18B20_READ_SCRATCHPAD);</span><br><span class="line">TLSB=oneWire_receiveByte();</span><br><span class="line">TMSB=oneWire_receiveByte();</span><br><span class="line">Temp=(TMSB&lt;&lt;<span class="number">8</span>)|TLSB;</span><br><span class="line">T=Temp/<span class="number">16.0</span>;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直流电机和PWM"><a href="#直流电机和PWM" class="headerlink" title="直流电机和PWM"></a>直流电机和PWM</h3><p>PWM也就是脉冲宽度调制，在有惯性的系统里可以通过对一系列脉冲的宽度进行调制，来等效获得<br>所需要的模拟参量。<br>PWM的重要参数：频率1&#x2F;Ts  占空比Ton&#x2F;Ts  精度&#x3D;占空比变化步距<br>这个PWM的应用用led灯来解释<br>大概就是led一般有两种情况，亮和不亮也就是0和1<br>要控制亮度的话就只能让灯在很短时间内快速亮灭并且亮灭交叉进行<br>用亮的时间占比来调节亮度，也就是占空比。<br>电机的速度大概也是这样。<br>控制方法可以用定时器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Rontine</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count;</span><br><span class="line">TL0 = <span class="number">0xA4</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TH0 = <span class="number">0xFF</span>;</span><br><span class="line">counter++;</span><br><span class="line">counter%=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(counter&lt;compare)&#123;</span><br><span class="line">led=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">led=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码，100是总的一个宽度，而compare是占空，当计数也就是计时小于这个的时候就亮，大于的时候灭，<br>然后清零进入循环，这样就能控制led的亮度</p><h3 id="关于AD和DA（模数转换和数模转换）"><a href="#关于AD和DA（模数转换和数模转换）" class="headerlink" title="关于AD和DA（模数转换和数模转换）"></a>关于AD和DA（模数转换和数模转换）</h3><p>这个还没看懂，等stm32再看一遍说不定就知道了</p><p>大概就这些了</p><h1 id="爱门"><a href="#爱门" class="headerlink" title="爱门"></a>爱门</h1><p><img src="/swimming.github.io/2023/10/12/51%E7%AC%94%E8%AE%B0/%E7%88%B1%E8%8E%89.jpg" alt="爱门"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	因为之前已经跟着江科大学完了51单片机，所以还是把记的一些笔记整合一下好点，C语言部分就不在这里写了&lt;/p&gt;
&lt;h3 id=&quot;led模块&quot;&gt;&lt;a href=&quot;#led模块&quot; class=&quot;headerlink&quot; title=&quot;led模块&quot;&gt;&lt;/a&gt;led模块&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>爱莉</title>
    <link href="http://example.com/2023/10/10/%E7%88%B1%E8%8E%89/"/>
    <id>http://example.com/2023/10/10/%E7%88%B1%E8%8E%89/</id>
    <published>2023-10-10T04:09:04.000Z</published>
    <updated>2023-10-10T04:27:05.945Z</updated>
    
    <content type="html"><![CDATA[<p> 不知道为什么之前图片一直传不上，这里重新发一遍试试</p><h1 id="爱门"><a href="#爱门" class="headerlink" title="爱门"></a>爱门</h1><p><img src="/swimming.github.io/2023/10/10/%E7%88%B1%E8%8E%89/aili.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 不知道为什么之前图片一直传不上，这里重新发一遍试试&lt;/p&gt;
&lt;h1 id=&quot;爱门&quot;&gt;&lt;a href=&quot;#爱门&quot; class=&quot;headerlink&quot; title=&quot;爱门&quot;&gt;&lt;/a&gt;爱门&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/swimming.github.io/2023/1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>swimmingの奇妙冒险创建于今日</title>
    <link href="http://example.com/2023/10/09/2023%E5%B9%B410%E6%9C%889%E5%8F%B7/"/>
    <id>http://example.com/2023/10/09/2023%E5%B9%B410%E6%9C%889%E5%8F%B7/</id>
    <published>2023-10-09T05:33:08.426Z</published>
    <updated>2023-10-09T13:25:39.117Z</updated>
    
    <content type="html"><![CDATA[<p>​之后可能会把写的一些东西上传到这里</p><h1 id="爱门"><a href="#爱门" class="headerlink" title="爱门"></a><strong>爱门</strong></h1><p><img src="/swimming.github.io/2023%E5%B9%B410%E6%9C%889%E5%8F%B7/aili.jpg" alt="爱门"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	之后可能会把写的一些东西上传到这里&lt;/p&gt;
&lt;h1 id=&quot;爱门&quot;&gt;&lt;a href=&quot;#爱门&quot; class=&quot;headerlink&quot; title=&quot;爱门&quot;&gt;&lt;/a&gt;&lt;strong&gt;爱门&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/swimming.github</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/10/08/hello-world/"/>
    <id>http://example.com/2023/10/08/hello-world/</id>
    <published>2023-10-08T12:18:09.863Z</published>
    <updated>2023-10-08T11:37:30.777Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
